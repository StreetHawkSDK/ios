/*
 * Copyright (c) StreetHawk, All rights reserved.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.
 */

#import "InstallViewController.h"

@interface InstallViewController ()

@property (nonatomic, strong) NSMutableArray *arrayValues; //cells for value displaying on the table
@property (nonatomic, strong) NSArray *arrayDescriptions; //cells for description displaying on the table

- (void)displayInstallData; //format install data to fill table cell data and refresh table to display.
- (void)installNotificationHandler:(NSNotification *)notification; //handle install notification to update display.
- (void)buttonUpdateClicked:(id)sender;

@end

@implementation InstallViewController

- (id)initWithStyle:(UITableViewStyle)style
{
    if (self = [super initWithStyle:UITableViewStyleGrouped])
    {
        NSMutableArray *arrayGeneralDescription = [NSMutableArray array];
        [arrayGeneralDescription addObject:@"The unique installation ID for the device. Generated by StreetHawk SDK automatically. If delete and re-install, install id changes."];
        [arrayGeneralDescription addObject:@"Customer developer register app_key in streethawk server. It's same as `StreetHawk.appKey`."];
        [arrayGeneralDescription addObject:@"Your unique identifier for this Client. Tagged by API `[StreetHawk tagCuid:\"<unique_value>\"];`"];
        [arrayGeneralDescription addObject:@"The version of the client application."];
        [arrayGeneralDescription addObject:@"The version of StreetHawkCore framework SDK."];
        [arrayGeneralDescription addObject:@"Operate system and version."];
        [arrayGeneralDescription addObject:@"If this App is AppStore or Enterprise provisioning profile, it's true; otherwise it's false."];
        [arrayGeneralDescription addObject:@"Development platform, hardcoded in StreetHawk SDK."];
        [arrayGeneralDescription addObject:@"The UTC time this install was created in year-month-day hour:minute:second format."];
        [arrayGeneralDescription addObject:@"The UTC time this install was modified in year-month-day hour:minute:second format."];
        [arrayGeneralDescription addObject:@"If current App deleted and re-install again, install id changes. This property is the Install this Install has been replaced by."];
        [arrayGeneralDescription addObject:@"An estimated timestamp (UTC) when the Install has been uninstalled, nil otherwise."];
        NSMutableArray *arrayGeneralValue = [NSMutableArray arrayWithCapacity:arrayGeneralDescription.count];
        NSMutableArray *arrayCapabilityDescription = [NSMutableArray array];
        [arrayCapabilityDescription addObject:@"Customer developer uses location related SDK functions, technically when his pod include `streethawk/Locations` or `streethawk/Geofence` or `streethawk/Beacons` and set `StreetHawk.isLocationServiceEnabled = YES` this is true; otherwise this is false."];
        [arrayCapabilityDescription addObject:@"Customer developer uses notification related SDK functions, technically when his pod include `streethawk/Push` and set `StreetHawk.isNotificationEnabled = YES` this is true; otherwise this is false."];
        [arrayCapabilityDescription addObject:@"Customer developer uses iBeacon related SDK functions, technically when his pod include `streethawk/Beacons` this is true; otherwise this is false."];
        [arrayCapabilityDescription addObject:@"When `featureiBeacons == YES` and end user's device supports iBeacon (iOS version >= 7.0, location service enabled and bluetooth enabled), it's true."];
        NSMutableArray *arrayCapabilityValue = [NSMutableArray arrayWithCapacity:arrayCapabilityDescription.count];
        NSMutableArray *arrayPushDescription = [NSMutableArray array];
        [arrayPushDescription addObject:@"If iOS App use development provisioning, it's `dev`; if use simulator, it's `simulator`; if use ad-hoc or AppStore or Enterprise distribution provisioning, it's `prod`."];
        [arrayPushDescription addObject:@"The access data for remote notification."];
        [arrayPushDescription addObject:@"It set to time stamp once get error from Apple's push notification server. If empty means Apple not reply error."];
        [arrayPushDescription addObject:@"Timestamp when end user refuse to receive notification. If notification is approved it's empty."];
        [arrayPushDescription addObject:@"Whether use \"smart push\"."];
        [arrayPushDescription addObject:@"Timestamp for feed. If not nil and local fetch time is older than this, SDK will fetch feed."];
        NSMutableArray *arrayPushValue = [NSMutableArray arrayWithCapacity:arrayPushDescription.count];
        NSMutableArray *arrayDeviceDescription = [NSMutableArray array];
        [arrayDeviceDescription addObject:@"Device's location. StreetHawk server try to guess location by ip even when device disable location, thus it may not be nil even device disable location."];
        [arrayDeviceDescription addObject:@"UTC offset in minutes."];
        [arrayDeviceDescription addObject:@"Raw text for the device model, e.g. `iPhone 8.1`."];
        [arrayDeviceDescription addObject:@"Ip address of current device. It's known by server, not sent from client."];
        [arrayDeviceDescription addObject:@"Mac address sent to server by client. It's not available since iOS 7 device, which always returns 02:00:00:00:00:00."];
        [arrayDeviceDescription addObject:@"[UIDevice device].identifierForVendor, a way to identifier vendor."];
        [arrayDeviceDescription addObject:@"If customer developer pass in advertise identifier, submit to StreetHawk server. It requires App to approve IDFA when submitting to AppStore, thus StreetHawk SDK cannot positively read this property. Set up by `StreetHawk.advertisingIdentifier = ...`."];
        [arrayDeviceDescription addObject:@"Carrier of current device."];
        [arrayDeviceDescription addObject:@"Screen resolution of current device."];
        NSMutableArray *arrayDeviceValue = [NSMutableArray arrayWithCapacity:arrayDeviceDescription.count];
        self.arrayValues = [NSMutableArray arrayWithObjects:arrayGeneralValue, arrayCapabilityValue, arrayPushValue, arrayDeviceValue, nil];
        self.arrayDescriptions = @[arrayGeneralDescription, arrayCapabilityDescription, arrayPushDescription, arrayDeviceDescription];
        
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(installNotificationHandler:) name:SHInstallRegistrationSuccessNotification object:nil];
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(installNotificationHandler:) name:SHInstallUpdateSuccessNotification object:nil];
    }
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    [self displayInstallData];
    //add update install button
    UIButton *buttonUpdate = [UIButton buttonWithType:UIButtonTypeSystem];
    [buttonUpdate addTarget:self action:@selector(buttonUpdateClicked:) forControlEvents:UIControlEventTouchUpInside];
    [buttonUpdate setTitle:@"Update Install" forState:UIControlStateNormal];
    buttonUpdate.frame = CGRectMake((self.tableView.bounds.size.width-200)/2, 0, 200, 50);
    UIView *viewHeader = [[UIView alloc] initWithFrame:CGRectMake(0, 0, self.tableView.bounds.size.width, 50)];
    viewHeader.backgroundColor = [UIColor lightGrayColor];
    [viewHeader addSubview:buttonUpdate];
    self.tableView.tableHeaderView = viewHeader;
}

- (void)dealloc
{
    [[NSNotificationCenter defaultCenter] removeObserver:self];
    self.tableView.dataSource = nil;
    self.tableView.delegate = nil;
}

#pragma mark - event handler

- (void)buttonUpdateClicked:(id)sender
{
    [StreetHawk registerOrUpdateInstallWithHandler:nil];
}

#pragma mark - private functions

- (void)displayInstallData
{
    dispatch_async(dispatch_get_main_queue(), ^
    {
        if (StreetHawk.currentInstall == nil)
        {
            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Not install successfully." message:nil delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alertView show];
            return;
        }
        NSMutableArray *arrayGeneralValue = self.arrayValues[0];
        arrayGeneralValue[0] = [NSString stringWithFormat:@"install id: %@", StreetHawk.currentInstall.suid];
        arrayGeneralValue[1] = [NSString stringWithFormat:@"app key: %@", StreetHawk.currentInstall.appKey];
        arrayGeneralValue[2] = [NSString stringWithFormat:@"sh_cuid: %@", StreetHawk.currentInstall.sh_cuid];
        arrayGeneralValue[3] = [NSString stringWithFormat:@"client App version: %@", StreetHawk.currentInstall.clientVersion];
        arrayGeneralValue[4] = [NSString stringWithFormat:@"StreetHawk SDK version: %@", StreetHawk.currentInstall.shVersion];
        arrayGeneralValue[5] = [NSString stringWithFormat:@"OS: %@ %@", StreetHawk.currentInstall.operatingSystem, StreetHawk.currentInstall.osVersion];
        arrayGeneralValue[6] = [NSString stringWithFormat:@"AppStore or Enterprise release: %@", StreetHawk.currentInstall.live ? @"true" : @"false"];
        arrayGeneralValue[7] = [NSString stringWithFormat:@"development platform: %@", StreetHawk.currentInstall.developmentPlatform];
        arrayGeneralValue[8] = [NSString stringWithFormat:@"created date: %@", StreetHawk.currentInstall.created];
        arrayGeneralValue[9] = [NSString stringWithFormat:@"modifid date: %@", StreetHawk.currentInstall.modified];
        arrayGeneralValue[10] = [NSString stringWithFormat:@"replaced by: %@", StreetHawk.currentInstall.replaced];
        arrayGeneralValue[11] = [NSString stringWithFormat:@"uninstalled date: %@", StreetHawk.currentInstall.uninstalled];
        NSMutableArray *arrayCapabilityValue = self.arrayValues[1];
        arrayCapabilityValue[0] = [NSString stringWithFormat:@"use location feature: %@", StreetHawk.currentInstall.featureLocation ? @"true" : @"false"];
        arrayCapabilityValue[1] = [NSString stringWithFormat:@"use push feature: %@", StreetHawk.currentInstall.featurePush ? @"true" : @"false"];
        arrayCapabilityValue[2] = [NSString stringWithFormat:@"use iBeacon feature: %@", StreetHawk.currentInstall.featureiBeacons ? @"true" : @"false"];
        arrayCapabilityValue[3] = [NSString stringWithFormat:@"support iBeacon: %@", StreetHawk.currentInstall.supportiBeacons ? @"true" : @"false"];
        NSMutableArray *arrayPushValue = self.arrayValues[2];
        arrayPushValue[0] = [NSString stringWithFormat:@"push service mode: %@", StreetHawk.currentInstall.mode];
        arrayPushValue[1] = [NSString stringWithFormat:@"token: %@", StreetHawk.currentInstall.pushNotificationToken];
        arrayPushValue[2] = [NSString stringWithFormat:@"negative feedback: %@", StreetHawk.currentInstall.negativeFeedback];
        arrayPushValue[3] = [NSString stringWithFormat:@"revoked: %@", StreetHawk.currentInstall.revoked];
        arrayPushValue[4] = [NSString stringWithFormat:@"use smart push: %@", StreetHawk.currentInstall.smart ? @"true" : @"false"];
        arrayPushValue[5] = [NSString stringWithFormat:@"feed timestamp: %@", StreetHawk.currentInstall.feed];
        NSMutableArray *arrayDeviceValue = self.arrayValues[3];
        if (StreetHawk.currentInstall.latitude != nil && StreetHawk.currentInstall.longitude != nil)
        {
            arrayDeviceValue[0] = [NSString stringWithFormat:@"location: (%.6f, %.6f)", StreetHawk.currentInstall.latitude.doubleValue, StreetHawk.currentInstall.longitude.doubleValue];
        }
        else
        {
            arrayDeviceValue[0] = @"location not available.";
        }
        arrayDeviceValue[1] = [NSString stringWithFormat:@"timezone offset in mins: %ld", (long)StreetHawk.currentInstall.utcOffset];
        arrayDeviceValue[2] = [NSString stringWithFormat:@"model: %@", StreetHawk.currentInstall.model];
        arrayDeviceValue[3] = [NSString stringWithFormat:@"ip address: %@", StreetHawk.currentInstall.ipAddress];
        arrayDeviceValue[4] = [NSString stringWithFormat:@"mac address: %@", StreetHawk.currentInstall.macAddress];
        arrayDeviceValue[5] = [NSString stringWithFormat:@"vendor identifier: %@", StreetHawk.currentInstall.identifierForVendor];
        arrayDeviceValue[6] = [NSString stringWithFormat:@"advertising identifier: %@", StreetHawk.currentInstall.advertisingIdentifier];
        arrayDeviceValue[7] = [NSString stringWithFormat:@"carrier: %@", StreetHawk.currentInstall.carrierName];
        arrayDeviceValue[8] = [NSString stringWithFormat:@"resolution: %@", StreetHawk.currentInstall.resolution];
        
        [self.tableView reloadData];
    });
}

- (void)installNotificationHandler:(NSNotification *)notification
{
    [self displayInstallData];
}

#pragma mark - UITableViewDelegate handler

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    return self.arrayValues.count;
}

- (NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section
{
    if (section == 0)
    {
        return @"General";
    }
    else if (section == 1)
    {
        return @"Capability";
    }
    else if (section == 2)
    {
        return @"Push Notification";
    }
    else if (section == 3)
    {
        return @"Device";
    }
    return nil;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    NSMutableArray *array = self.arrayValues[section];
    return array.count;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    NSString *cellIdentifier = @"installCell";
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];
    if (cell == nil)
    {
        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:cellIdentifier];
        cell.textLabel.font = [UIFont systemFontOfSize:13];
        cell.textLabel.lineBreakMode = NSLineBreakByWordWrapping;
        cell.textLabel.numberOfLines = 0;
        cell.detailTextLabel.font = [UIFont systemFontOfSize:10];
        cell.detailTextLabel.lineBreakMode = NSLineBreakByWordWrapping;
        cell.detailTextLabel.numberOfLines = 0;
    }
    NSMutableArray *arrayValues = self.arrayValues[indexPath.section];
    cell.textLabel.text = arrayValues[indexPath.row];
    NSArray *arrayDescriptions = self.arrayDescriptions[indexPath.section];
    cell.detailTextLabel.text = arrayDescriptions[indexPath.row];
    return cell;
}

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
    NSMutableArray *arrayValue = self.arrayValues[indexPath.section];
    NSString *content = arrayValue[indexPath.row];
    NSArray *arrayDescription = self.arrayDescriptions[indexPath.section];
    NSString *description = arrayDescription[indexPath.row];
    CGSize constrainSize = CGSizeMake(self.tableView.bounds.size.width - 10, 100);
    CGRect rectValue = [content boundingRectWithSize:constrainSize options:(NSStringDrawingUsesLineFragmentOrigin | NSStringDrawingUsesFontLeading) attributes:@{NSFontAttributeName:[UIFont systemFontOfSize:13]} context:nil];
    CGRect rectDescription = [description boundingRectWithSize:constrainSize options:(NSStringDrawingUsesLineFragmentOrigin | NSStringDrawingUsesFontLeading) attributes:@{NSFontAttributeName:[UIFont systemFontOfSize:10]} context:nil];
    return rectValue.size.height + rectDescription.size.height + 10;
}

@end
